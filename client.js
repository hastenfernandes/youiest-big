// Generated by CoffeeScript 1.6.2
var WIAfterUpdate, formatUpdate;

smite(eval(s));

ConsoleMe.subscribe();

formatUpdate = function(args) {
  var up;

  up = {
    from: args.from,
    to: args.to || false
  };
  return up;
};

this.connect = function(args) {
  var ups, wi;

  smite(eval(s), 'hi from connect', args, WI.findOne({
    _id: 'wiber'
  }));
  eval(smiter);
  smite('smiter!', eval(s));
  if (!args.from) {
    smite('not from anywhere! run!', eval(s));
  }
  if (!WI.findOne({
    _id: 'wiber'
  } || !WI.findOne({
    _id: Meteor.userId
  }))) {
    smite('we have no target! connect in what outbox?', eval(s));
  }
  ups = formatUpdate(args);
  wi = WI.update({
    _id: user
  }, {
    '$push': {
      'outbox': ups
    }
  });
  smite('we have an outbox', WI.findOne({
    _id: user
  }), eval(s));
  return wi;
};

Unionize.connect = connect;

WIAfterUpdate = WI.after.update(function(userId, doc, fieldNames, modifier, options) {});

this.feedItems = React.createClass({
  "getInitialState": function() {
    return {
      feeds: WI.findOne({
        "_id": user
      })
    };
  },
  "componentDidMount": function() {
    var self;

    self = this;
    return Tracker.autorun(function() {
      var feed;

      feed = WI.findOne({
        "_id": user
      });
      return self.setState({
        "feeds": feed
      });
    });
  },
  "render": function() {
    var feedsList, sending;

    feedsList = [];
    if (this.state.feeds && this.state.feeds.sending) {
      sending = this.state.feeds.sending;
      feedsList = sending.map(function(feed) {
        return React.DOM.div(null, {}, feed.from + feed.to);
      });
    }
    return React.DOM.div(null, feedsList);
  }
});
