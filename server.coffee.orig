
smite eval(s) 
W.before.insert (userId, doc) ->
  #smite eval(s),  arguments, 'before insert arguments'
  doc.createdAt = Date.now()
  if !doc.journey
      doc.journey = []

    doc.journey.push
      'serverOutbox': new Date().getTime()
  return

# write to a jobs collection, that embeds all earlier versions of the doc into the new one, so there's no dupes

W.after.insert (userId, doc) ->
  #smite eval(s),  arguments , 'arguments after insert'
  if doc.to
    #smite 'found a target WI', eval s
    WI.update
      _id: doc.to
    ,
      '$push':
        inbox: 
          from: doc.from
          to: doc.to
          "journey": ['serverInbox': new Date().getTime()]
    # WI.update
    #   _id: doc.from
    # ,
    #   '$push':
    #     outbox: 
    #       from: doc.from
    #       to: doc.to
    #       delivered: true
    # W.update({"_id": doc._id},{$push: {
    #     "journey": 'serverInbox': new Date().getTime()
    #   }})

    # db.foo.update({"array.value" : 22}, {"$set" : {"array.$.text" : "blah"}})
    #smite WI.findOne

  return

<<<<<<< HEAD
# remove an item from array
# db.profiles.update( { _id: 1 }, { $pull: { votes: { $gte: 6 } } } )

# update an element in JSON for an array 
# db.foo.update({"array.value" : 22}, {"$set" : {"array.$.text" : "blah"}})


=======
>>>>>>> 1241752925ea048384b4095e2432ee9a15538f5d
@modModifier = {}
modModifier.outbox = (modifier,userId) ->
  #smite 'hit outbox in', modifier, eval s
  old_key = 'outbox'
  new_key = 'sending'
  if old_key != new_key
    smite modifier, 'needs a new agenda', eval s
    smite eval Object.defineProperty modifier.$push, new_key, Object.getOwnPropertyDescriptor(modifier.$push, old_key)
    smite eval delete modifier.$push[old_key], 'deleted key', eval s
  # hand off the inserts to an async function, process to update db without waiting
  #smite modifier
  #smite modifier.$push
  #smite modifier.$push.sending.to
  smite inserted = W.insert
    to: modifier.$push.sending.to
    from: modifier.$push.sending.from
  modifier = null
  # W.update({"_id": doc._id},{$push: {
  #       "journey": 'onOutbox': new Date().getTime()
  #     }})
  return modifier

@generateRecommend = (i) ->
  to: user+i
  from: recFrom+i
  journey: [
    feed: new Date().getTime()
  ]



modModifier.feed = (modifier, doc, userId) ->
  smite doc, 'modModifier.feed doc', eval s
  unless doc.feed instanceof Array
    unless modifier.feed instanceof Array 
      smite modifier, doc, 'modifier, doc', eval s
      # "s" {"feed":"nothing"} {"_id":"wiber","sending":[{"from":"picture5","to":"wiber5"},{"from":"picture5","to":"wiber5"}]} "modifier, userId" "server.coffee:83:59)
      modifier.feed = []

afterModifier = {}
# feed balancing etc happens after the original update hits the db to let the db work
#TODO remove test feed function
@feedMe = (docId) ->
  fed = []
  for i in 'abcdefghiklmo'
    fed.push(generateRecommend i)
  one = WI.update
    _id: docId
  ,
    '$pushAll': 
      'feed': fed
  smite one, 'oneoneone done', eval s

afterModifier.feed = (modifier, doc, userId) ->
  docId = arguments[1]._id
  smite arguments, docId, doc.feed.length, 'doc afterModifier', eval s
  if !stackSize 
    stackSize = 5

  unless doc.feed.length >= stackSize
    ### WI.find({_id:'wiber'}).fetch()[0].feed # works
    unless afterModifier[docId] 
      afterModifier[docId] = _.throttle feedMe(docId), 250
      setTimeout (->
        delete afterModifier[docId]
      ), 300
    ###
    userObject = WI.findOne 
      _id: docId
    smite userObject,  userObject.feed.length, 'almost userObject', eval s
    unless userObject.feed.length >= stackSize
      smite feedMe(docId), 'feedMe(docId)', eval s

  # continue with the feed update call to db and go call the method async while waiting  
  #Meteor.call 'stackBalance', userId, doc, (res, err) ->
  # {"feed":"nothing"} null "modifier, userId" "server.coffee:68:52)

WI.before.update (userId, doc, fieldNames, modifier, options) ->
<<<<<<< HEAD
  # console.error("fieldNames")
  # console.error(fieldNames)
=======

>>>>>>> 1241752925ea048384b4095e2432ee9a15538f5d
  for fieldName in fieldNames
    # do we have a function for this fieldname? 
    if _.has(modModifier, fieldName) 
      smite fieldName, doc, 'spinning modModifier', eval s
      # modify the modifier so the update is redirected before hitting db
<<<<<<< HEAD
      modifier = modModifier[fieldName] modifier,userId
  for i in arguments
    smite i,'arguments', eval s
  W.update({"_id": doc._id},{$push: {
        "journey": 'serverOutbox': new Date().getTime()
      }})
  #smite modifier, doc, fieldNames, Meteor.default_server.method_handlers,'fieldname calling method', eval s
=======
      smite modifier = modModifier[fieldName] modifier, doc, userId
>>>>>>> 1241752925ea048384b4095e2432ee9a15538f5d
  

#smite modifier, doc, fieldNames, Meteor.default_server.method_handlers,'fieldname calling method', eval s
#smite eval(s), doc, doc.outbox, modifier, 'got before updated WI! on server! is last arg correctly modifier?' 
 

WIAfterUpdate = WI.after.update (userId, doc, fieldNames, modifier, options) ->

<<<<<<< HEAD
    # doc.journey.push
    #   'serverOutbox': new Date().getTime()
  for i in arguments
    smite  arguments, 'after update arguments', eval s
=======
  for fieldName in fieldNames
    # do we have a function for this fieldname? 

    if _.has(afterModifier, fieldName) 

      smite fieldName, 'spinning afterModifier', eval s
      # modify the modifier so the update is redirected before hitting db
      modifier = afterModifier[fieldName] modifier, doc, userId

>>>>>>> 1241752925ea048384b4095e2432ee9a15538f5d

  
  
  

Meteor.publish(null,()->
	return W.find({});
);

Meteor.publish(null,()->
	return WI.find({});
);

